{"ast":null,"code":"'use strict';\n\nconst ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi256 = function () {\n  let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return code => `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = function () {\n  let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return (red, green, blue) => `\\u001B[${38 + offset};2;${red};${green};${blue}m`;\n};\n\nfunction assembleStyles() {\n  const codes = new Map();\n  const styles = {\n    modifier: {\n      reset: [0, 0],\n      // 21 isn't widely supported and 22 does the same thing\n      bold: [1, 22],\n      dim: [2, 22],\n      italic: [3, 23],\n      underline: [4, 24],\n      overline: [53, 55],\n      inverse: [7, 27],\n      hidden: [8, 28],\n      strikethrough: [9, 29]\n    },\n    color: {\n      black: [30, 39],\n      red: [31, 39],\n      green: [32, 39],\n      yellow: [33, 39],\n      blue: [34, 39],\n      magenta: [35, 39],\n      cyan: [36, 39],\n      white: [37, 39],\n      // Bright color\n      blackBright: [90, 39],\n      redBright: [91, 39],\n      greenBright: [92, 39],\n      yellowBright: [93, 39],\n      blueBright: [94, 39],\n      magentaBright: [95, 39],\n      cyanBright: [96, 39],\n      whiteBright: [97, 39]\n    },\n    bgColor: {\n      bgBlack: [40, 49],\n      bgRed: [41, 49],\n      bgGreen: [42, 49],\n      bgYellow: [43, 49],\n      bgBlue: [44, 49],\n      bgMagenta: [45, 49],\n      bgCyan: [46, 49],\n      bgWhite: [47, 49],\n      // Bright color\n      bgBlackBright: [100, 49],\n      bgRedBright: [101, 49],\n      bgGreenBright: [102, 49],\n      bgYellowBright: [103, 49],\n      bgBlueBright: [104, 49],\n      bgMagentaBright: [105, 49],\n      bgCyanBright: [106, 49],\n      bgWhiteBright: [107, 49]\n    }\n  }; // Alias bright black as gray (and grey)\n\n  styles.color.gray = styles.color.blackBright;\n  styles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n  styles.color.grey = styles.color.blackBright;\n  styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n\n  for (const [groupName, group] of Object.entries(styles)) {\n    for (const [styleName, style] of Object.entries(group)) {\n      styles[styleName] = {\n        open: `\\u001B[${style[0]}m`,\n        close: `\\u001B[${style[1]}m`\n      };\n      group[styleName] = styles[styleName];\n      codes.set(style[0], style[1]);\n    }\n\n    Object.defineProperty(styles, groupName, {\n      value: group,\n      enumerable: false\n    });\n  }\n\n  Object.defineProperty(styles, 'codes', {\n    value: codes,\n    enumerable: false\n  });\n  styles.color.close = '\\u001B[39m';\n  styles.bgColor.close = '\\u001B[49m';\n  styles.color.ansi256 = wrapAnsi256();\n  styles.color.ansi16m = wrapAnsi16m();\n  styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n  styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET); // From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\n  Object.defineProperties(styles, {\n    rgbToAnsi256: {\n      value: (red, green, blue) => {\n        // We use the extended greyscale palette here, with the exception of\n        // black and white. normal palette only has 4 greyscale shades.\n        if (red === green && green === blue) {\n          if (red < 8) {\n            return 16;\n          }\n\n          if (red > 248) {\n            return 231;\n          }\n\n          return Math.round((red - 8) / 247 * 24) + 232;\n        }\n\n        return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);\n      },\n      enumerable: false\n    },\n    hexToRgb: {\n      value: hex => {\n        const matches = /(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})/i.exec(hex.toString(16));\n\n        if (!matches) {\n          return [0, 0, 0];\n        }\n\n        let {\n          colorString\n        } = matches.groups;\n\n        if (colorString.length === 3) {\n          colorString = colorString.split('').map(character => character + character).join('');\n        }\n\n        const integer = Number.parseInt(colorString, 16);\n        return [integer >> 16 & 0xFF, integer >> 8 & 0xFF, integer & 0xFF];\n      },\n      enumerable: false\n    },\n    hexToAnsi256: {\n      value: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n      enumerable: false\n    }\n  });\n  return styles;\n} // Make the export immutable\n\n\nObject.defineProperty(module, 'exports', {\n  enumerable: true,\n  get: assembleStyles\n});","map":null,"metadata":{},"sourceType":"script"}