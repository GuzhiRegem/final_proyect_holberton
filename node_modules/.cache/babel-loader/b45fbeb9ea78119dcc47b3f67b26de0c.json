{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport Base from '../Base/Base';\nimport Button from '../Button/Button';\nimport iconImage from '../icons/image';\nimport IImage from './IImage';\nimport { EditMode } from './types';\nimport moveable from './moveable';\nimport resizeable from './resizeable';\nexport default class ImageControl extends Base {\n  constructor() {\n    super();\n    this.button = new Button();\n    this.fileInput = document.createElement('input');\n    this.fileInput.type = 'file';\n    this.fileInput.accept = '.jpg, .jpeg, .png';\n    this.fileInput.multiple = true;\n    this.images = [];\n    this.editMode = null;\n    this.selectedImage = null;\n    this.onMapClick = this.onMapClick.bind(this);\n    this.onFileInputChange = this.onFileInputChange.bind(this);\n    this.keyDownListener = this.keyDownListener.bind(this);\n  }\n\n  insert() {\n    this.addClassName('mapbox-control-image');\n    this.button.setIcon(iconImage());\n    this.addButton(this.button);\n    this.node.appendChild(this.fileInput);\n    this.button.onClick(() => this.fileInput.click());\n    this.fileInput.addEventListener('change', this.onFileInputChange);\n  }\n\n  onFileInputChange() {\n    Array.from(this.fileInput.files).forEach((file, index) => __awaiter(this, void 0, void 0, function* () {\n      const image = yield this.addImage(file);\n      if (this.fileInput.files.length - 1 === index) this.selectImage(image.id);\n    }));\n  }\n\n  addImage(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      const image = new IImage();\n\n      if (typeof data === 'string') {\n        yield image.loadUrl(data);\n      } else if (data) {\n        yield image.loadFile(data);\n      } else {\n        throw Error('file or url is required');\n      }\n\n      if (options.position) {\n        image.position = options.position;\n      } else {\n        image.setInitialPosition(this.map);\n      }\n\n      this.images.push(image);\n      this.drawImage(image);\n      this.map.fire('image.add', image);\n      return image;\n    });\n  }\n\n  drawImage(image) {\n    this.map.addSource(image.imageSource.id, image.imageSource.source);\n    this.map.addSource(image.polygonSource.id, image.polygonSource.source);\n    this.map.addSource(image.cornersSource.id, image.cornersSource.source);\n    this.map.addLayer(image.rasterLayer);\n    this.map.addLayer(image.fillLayer);\n  }\n\n  redraw() {\n    this.images.forEach(image => this.drawImage(image));\n\n    if (this.movingOff) {\n      this.movingOff();\n    }\n\n    if (this.transformOff) {\n      this.transformOff();\n    }\n  }\n\n  onMapClick(event) {\n    const imageFillLayersId = this.images.map(i => i.fillLayer.id);\n    const features = this.map.queryRenderedFeatures(event.point, {\n      layers: imageFillLayersId\n    });\n\n    if (features.length) {\n      this.selectImage(features[0].properties.id);\n    } else {\n      this.deselectImage();\n    }\n  }\n\n  movingOn() {\n    this.movingOff = moveable(this.map, this.selectedImage, position => {\n      this.updateImageSource(position);\n    });\n  }\n\n  transformOn() {\n    this.transformOff = resizeable(this.map, this.selectedImage, position => {\n      this.updateImageSource(position);\n    });\n  }\n\n  selectImage(id) {\n    if (this.selectedImage && this.selectedImage.id !== id) this.deselectImage();\n    this.selectedImage = this.images.find(i => i.id === id);\n\n    if (!this.editMode) {\n      this.editMode = EditMode.Move;\n      this.movingOn();\n    } else if (this.editMode === EditMode.Move) {\n      this.editMode = EditMode.Transform;\n      this.movingOff();\n      this.transformOn();\n    }\n\n    this.map.fire('image.select', this.selectedImage);\n    document.addEventListener('keydown', this.keyDownListener);\n  }\n\n  deselectImage() {\n    if (!this.selectedImage) return;\n\n    if (this.editMode === EditMode.Move) {\n      this.movingOff();\n    } else if (this.editMode === EditMode.Transform) {\n      this.transformOff();\n    }\n\n    this.map.fire('image.deselect', this.selectedImage);\n    this.selectedImage = null;\n    this.editMode = null;\n    document.removeEventListener('keydown', this.keyDownListener);\n  }\n\n  updateImageSource(position) {\n    const selectedImage = this.selectedImage;\n    selectedImage.position = position;\n    this.map.getSource(selectedImage.imageSource.id).setCoordinates(selectedImage.coordinates);\n    this.map.getSource(selectedImage.polygonSource.id).setData(selectedImage.asPolygon);\n    this.map.getSource(selectedImage.cornersSource.id).setData(selectedImage.asPoints);\n    this.map.fire('image.update', this.selectedImage);\n  }\n\n  keyDownListener(event) {\n    if (event.key === 'Escape') {\n      this.deselectImage();\n    }\n  }\n\n  onAddControl() {\n    if (this.map.isStyleLoaded()) {\n      this.insert();\n    } else {\n      this.map.once('style.load', () => this.insert());\n    }\n\n    this.map.on('style.load', () => this.redraw());\n    this.mapContainer = this.map.getContainer();\n    this.map.on('click', this.onMapClick);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}