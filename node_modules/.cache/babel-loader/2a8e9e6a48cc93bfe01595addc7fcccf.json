{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport distance from '@turf/distance';\nimport Base from '../Base/Base';\nimport Button from '../Button/Button';\nimport labelFormat from './labelFormat';\nimport lineStringFeature from './lineStringFeature';\nimport pointFeatureCollection from './pointFeatureCollection';\nimport iconRuler from '../icons/ruler';\nconst LAYER_LINE = 'controls-layer-line';\nconst LAYER_SYMBOL = 'controls-layer-symbol';\nconst SOURCE_LINE = 'controls-source-line';\nconst SOURCE_SYMBOL = 'controls-source-symbol';\nconst MAIN_COLOR = '#263238';\nconst HALO_COLOR = '#fff';\nexport default class RulerControl extends Base {\n  constructor(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    super();\n    this.isMeasuring = false;\n    this.markers = [];\n    this.coordinates = [];\n    this.labels = [];\n    this.units = (_a = options === null || options === void 0 ? void 0 : options.units) !== null && _a !== void 0 ? _a : 'kilometers';\n    this.font = (_b = options === null || options === void 0 ? void 0 : options.font) !== null && _b !== void 0 ? _b : ['Roboto Medium'];\n    this.fontSize = (_c = options === null || options === void 0 ? void 0 : options.fontSize) !== null && _c !== void 0 ? _c : 12;\n    this.fontHalo = (_d = options === null || options === void 0 ? void 0 : options.fontHalo) !== null && _d !== void 0 ? _d : 1;\n    this.textVariableAnchor = (options === null || options === void 0 ? void 0 : options.textVariableAnchor) || ['top'];\n    this.textAllowOverlap = (options === null || options === void 0 ? void 0 : options.textAllowOverlap) || false;\n    this.markerNodeSize = `${(_e = options === null || options === void 0 ? void 0 : options.markerNodeSize) !== null && _e !== void 0 ? _e : 12}px`;\n    this.markerNodeBorderWidth = `${(_f = options === null || options === void 0 ? void 0 : options.markerNodeBorderWidth) !== null && _f !== void 0 ? _f : 2}px`;\n    this.labelFormat = (_g = options === null || options === void 0 ? void 0 : options.labelFormat) !== null && _g !== void 0 ? _g : labelFormat;\n    this.mainColor = (_h = options === null || options === void 0 ? void 0 : options.mainColor) !== null && _h !== void 0 ? _h : MAIN_COLOR;\n    this.secondaryColor = (_j = options === null || options === void 0 ? void 0 : options.secondaryColor) !== null && _j !== void 0 ? _j : HALO_COLOR;\n    this.button = new Button();\n    this.mapClickListener = this.mapClickListener.bind(this);\n    this.styleLoadListener = this.styleLoadListener.bind(this);\n  }\n\n  insert() {\n    this.addClassName('mapbox-control-ruler');\n    this.button.setIcon(iconRuler());\n    this.button.onClick(() => {\n      if (this.isMeasuring) {\n        this.measuringOff();\n      } else {\n        this.measuringOn();\n      }\n    });\n    this.addButton(this.button);\n  }\n\n  draw() {\n    this.map.addSource(SOURCE_LINE, {\n      type: 'geojson',\n      data: lineStringFeature(this.coordinates)\n    });\n    this.map.addSource(SOURCE_SYMBOL, {\n      type: 'geojson',\n      data: pointFeatureCollection(this.coordinates, this.labels)\n    });\n    this.map.addLayer({\n      id: LAYER_LINE,\n      type: 'line',\n      source: SOURCE_LINE,\n      paint: {\n        'line-color': this.mainColor,\n        'line-width': 2\n      }\n    });\n    this.map.addLayer({\n      id: LAYER_SYMBOL,\n      type: 'symbol',\n      source: SOURCE_SYMBOL,\n      layout: {\n        'text-field': '{text}',\n        'text-font': this.font,\n        'text-anchor': 'top',\n        'text-size': this.fontSize,\n        'text-offset': [0, 0.8]\n      },\n      paint: {\n        'text-color': this.mainColor,\n        'text-halo-color': this.secondaryColor,\n        'text-halo-width': this.fontHalo\n      }\n    });\n  }\n\n  measuringOn() {\n    this.isMeasuring = true;\n    this.markers = [];\n    this.coordinates = [];\n    this.labels = [];\n    this.map.getCanvas().style.cursor = 'crosshair';\n    this.button.addClassName('-active');\n    this.draw();\n    this.map.on('click', this.mapClickListener);\n    this.map.on('style.load', this.styleLoadListener);\n    this.map.fire('ruler.on');\n  }\n\n  measuringOff() {\n    this.isMeasuring = false;\n    this.map.getCanvas().style.cursor = '';\n    this.button.removeClassName('-active'); // remove layers, sources and event listeners\n\n    this.map.removeLayer(LAYER_LINE);\n    this.map.removeLayer(LAYER_SYMBOL);\n    this.map.removeSource(SOURCE_LINE);\n    this.map.removeSource(SOURCE_SYMBOL);\n    this.markers.forEach(m => m.remove());\n    this.map.off('click', this.mapClickListener);\n    this.map.off('style.load', this.styleLoadListener);\n    this.map.fire('ruler.off');\n  }\n\n  mapClickListener(event) {\n    const markerNode = this.getMarkerNode();\n    const marker = new mapboxgl.Marker({\n      element: markerNode,\n      draggable: true\n    }).setLngLat(event.lngLat).addTo(this.map);\n    const newCoordinate = [event.lngLat.lng, event.lngLat.lat];\n    this.coordinates.push(newCoordinate);\n    this.updateLabels();\n    this.updateSource();\n    this.markers.push(marker);\n    this.map.fire('ruler.change', {\n      coordinates: this.coordinates\n    });\n    marker.on('drag', () => {\n      const index = this.markers.indexOf(marker);\n      const lngLat = marker.getLngLat();\n      this.coordinates[index] = [lngLat.lng, lngLat.lat];\n      this.updateLabels();\n      this.updateSource();\n    });\n    marker.on('dragend', () => {\n      this.map.fire('ruler.change', {\n        coordinates: this.coordinates\n      });\n    });\n  }\n\n  updateSource() {\n    const lineSource = this.map.getSource(SOURCE_LINE);\n    const symbolSource = this.map.getSource(SOURCE_SYMBOL);\n    lineSource.setData(lineStringFeature(this.coordinates));\n    symbolSource.setData(pointFeatureCollection(this.coordinates, this.labels));\n  }\n\n  updateLabels() {\n    const {\n      coordinates,\n      units,\n      labelFormat\n    } = this;\n    let sum = 0;\n    this.labels = coordinates.map((coordinate, index) => {\n      if (index === 0) return labelFormat(0);\n      sum += distance(coordinates[index - 1], coordinates[index], {\n        units\n      });\n      return labelFormat(sum);\n    });\n  }\n\n  getMarkerNode() {\n    const node = document.createElement('div');\n    node.style.width = '12px';\n    node.style.height = '12px';\n    node.style.borderRadius = '50%';\n    node.style.background = this.secondaryColor;\n    node.style.boxSizing = 'border-box';\n    node.style.border = `2px solid ${this.mainColor}`;\n    return node;\n  }\n\n  styleLoadListener() {\n    this.draw();\n  }\n\n  onAddControl() {\n    this.insert();\n  }\n\n  onRemoveControl() {\n    if (this.isMeasuring) this.measuringOff();\n    this.map.off('click', this.mapClickListener);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}