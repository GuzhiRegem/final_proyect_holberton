{"ast":null,"code":"import * as React from 'react';\nimport { useState, useRef, useEffect, useContext, useMemo, forwardRef, useImperativeHandle } from 'react';\nimport { MountedMapsContext } from './use-map';\nimport Mapbox from '../mapbox/mapbox';\nimport createRef from '../mapbox/create-ref';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport setGlobals from '../utils/set-globals';\nexport const MapContext = React.createContext(null);\nconst defaultProps = {\n  // Constraints\n  minZoom: 0,\n  maxZoom: 22,\n  minPitch: 0,\n  maxPitch: 60,\n  // Interaction handlers\n  scrollZoom: true,\n  boxZoom: true,\n  dragRotate: true,\n  dragPan: true,\n  keyboard: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  touchPitch: true,\n  // Style\n  mapStyle: {\n    version: 8,\n    sources: {},\n    layers: []\n  },\n  styleDiffing: true,\n  projection: 'mercator',\n  renderWorldCopies: true,\n  // Callbacks\n  onError: e => console.error(e.error),\n  // Globals\n  RTLTextPlugin: 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'\n};\nconst Map = forwardRef((props, ref) => {\n  const mountedMapsContext = useContext(MountedMapsContext);\n  const [mapInstance, setMapInstance] = useState(null);\n  const containerRef = useRef();\n  const {\n    current: contextValue\n  } = useRef({\n    mapLib: null,\n    map: null\n  });\n  useEffect(() => {\n    const mapLib = props.mapLib;\n    let isMounted = true;\n    let mapbox;\n    Promise.resolve(mapLib || import('mapbox-gl')).then(mapboxgl => {\n      if (!isMounted) {\n        return;\n      }\n\n      if (!mapboxgl.Map) {\n        // commonjs style\n        mapboxgl = mapboxgl.default;\n      }\n\n      if (!mapboxgl || !mapboxgl.Map) {\n        throw new Error('Invalid mapLib');\n      }\n\n      if (mapboxgl.supported(props)) {\n        setGlobals(mapboxgl, props);\n\n        if (props.reuseMaps) {\n          mapbox = Mapbox.reuse(props, containerRef.current);\n        }\n\n        if (!mapbox) {\n          mapbox = new Mapbox(mapboxgl.Map, props, containerRef.current);\n        }\n\n        contextValue.map = mapbox.map;\n        contextValue.mapLib = mapboxgl;\n        setMapInstance(mapbox);\n        mountedMapsContext?.onMapMount(createRef(mapbox, mapboxgl), props.id);\n      } else {\n        throw new Error('Map is not supported by this browser');\n      }\n    }).catch(error => {\n      props.onError({\n        type: 'error',\n        target: null,\n        originalEvent: null,\n        error\n      });\n    });\n    return () => {\n      isMounted = false;\n\n      if (mapbox) {\n        mountedMapsContext?.onMapUnmount(props.id);\n\n        if (props.reuseMaps) {\n          mapbox.recycle();\n        } else {\n          mapbox.destroy();\n        }\n      }\n    };\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    if (mapInstance) {\n      mapInstance.setProps(props);\n    }\n  });\n  useImperativeHandle(ref, () => createRef(mapInstance, contextValue.mapLib), [mapInstance]);\n  const style = useMemo(() => ({\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    ...props.style\n  }), [props.style]);\n  return React.createElement(\"div\", {\n    id: props.id,\n    ref: containerRef,\n    style: style\n  }, mapInstance && React.createElement(MapContext.Provider, {\n    value: contextValue\n  }, props.children));\n});\nMap.displayName = 'Map';\nMap.defaultProps = defaultProps;\nexport default Map;","map":null,"metadata":{},"sourceType":"module"}