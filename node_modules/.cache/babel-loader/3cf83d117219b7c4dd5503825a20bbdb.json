{"ast":null,"code":"import getLanguageField from './getLanguageField';\nimport localizeTextField from './localizeTextField';\nimport Base from '../Base/Base';\nconst SUPPORTED_LANGUAGES = ['en', 'es', 'fr', 'de', 'ru', 'zh', 'pt', 'ar', 'ja', 'ko', 'mul'];\nexport default class LanguageControl extends Base {\n  constructor(options) {\n    var _a, _b, _c;\n\n    super();\n    this.supportedLanguages = (_a = options === null || options === void 0 ? void 0 : options.supportedLanguages) !== null && _a !== void 0 ? _a : SUPPORTED_LANGUAGES;\n    this.language = options === null || options === void 0 ? void 0 : options.language;\n    this.getLanguageField = (_b = options === null || options === void 0 ? void 0 : options.getLanguageField) !== null && _b !== void 0 ? _b : getLanguageField;\n    this.excludedLayerIds = (_c = options === null || options === void 0 ? void 0 : options.excludedLayerIds) !== null && _c !== void 0 ? _c : [];\n    this.styleChangeListener = this.styleChangeListener.bind(this);\n  }\n\n  onAddControl() {\n    this.map.on('styledata', this.styleChangeListener);\n  }\n\n  onRemoveControl() {\n    this.map.off('styledata', this.styleChangeListener);\n  }\n\n  styleChangeListener() {\n    this.map.off('styledata', this.styleChangeListener);\n    this.setLanguage(this.language);\n  }\n\n  setLanguage() {\n    let lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.browserLanguage();\n    const language = this.supportedLanguages.indexOf(lang) < 0 ? 'mul' : lang;\n    const style = this.map.getStyle();\n    const languageField = this.getLanguageField(language);\n    const layers = style.layers.map(layer => {\n      if (layer.type !== 'symbol') return layer;\n      if (!layer.layout || !layer.layout['text-field']) return layer;\n      if (this.excludedLayerIds.indexOf(layer.id) !== -1) return layer;\n      const textField = layer.layout['text-field'];\n      const textFieldLocalized = localizeTextField(textField, languageField);\n      return Object.assign(Object.assign({}, layer), {\n        layout: Object.assign(Object.assign({}, layer.layout), {\n          'text-field': textFieldLocalized\n        })\n      });\n    });\n    this.map.setStyle(Object.assign(Object.assign({}, style), {\n      layers\n    }));\n  }\n\n  browserLanguage() {\n    const language = navigator.languages ? navigator.languages[0] : navigator.language;\n    const parts = language.split('-');\n    const languageCode = parts.length > 1 ? parts[0] : language;\n    if (this.supportedLanguages.indexOf(languageCode) > -1) return languageCode;\n    return 'mul';\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}